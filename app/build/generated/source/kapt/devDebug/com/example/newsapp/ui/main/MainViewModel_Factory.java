// Generated by Dagger (https://dagger.dev).
package com.example.newsapp.ui.main;

import com.example.newsapp.di.CoroutinesDispatcherProvider;
import com.example.newsapp.network.repository.INewsRepository;
import com.example.newsapp.utils.NetworkHelper;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainViewModel_Factory implements Factory<MainViewModel> {
  private final Provider<INewsRepository> repositoryProvider;

  private final Provider<NetworkHelper> networkHelperProvider;

  private final Provider<CoroutinesDispatcherProvider> coroutinesDispatcherProvider;

  public MainViewModel_Factory(Provider<INewsRepository> repositoryProvider,
      Provider<NetworkHelper> networkHelperProvider,
      Provider<CoroutinesDispatcherProvider> coroutinesDispatcherProvider) {
    this.repositoryProvider = repositoryProvider;
    this.networkHelperProvider = networkHelperProvider;
    this.coroutinesDispatcherProvider = coroutinesDispatcherProvider;
  }

  @Override
  public MainViewModel get() {
    return newInstance(repositoryProvider.get(), networkHelperProvider.get(), coroutinesDispatcherProvider.get());
  }

  public static MainViewModel_Factory create(Provider<INewsRepository> repositoryProvider,
      Provider<NetworkHelper> networkHelperProvider,
      Provider<CoroutinesDispatcherProvider> coroutinesDispatcherProvider) {
    return new MainViewModel_Factory(repositoryProvider, networkHelperProvider, coroutinesDispatcherProvider);
  }

  public static MainViewModel newInstance(INewsRepository repository, NetworkHelper networkHelper,
      CoroutinesDispatcherProvider coroutinesDispatcherProvider) {
    return new MainViewModel(repository, networkHelper, coroutinesDispatcherProvider);
  }
}
